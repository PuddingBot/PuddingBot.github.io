"use strict";(self.webpackChunkpudding_bot_docs=self.webpackChunkpudding_bot_docs||[]).push([[477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"forking-fun","metadata":{"permalink":"/blog/forking-fun","editUrl":"https://github.com/PuddingBot/pudding-bot-docs/tree/master/blog/2022-05-03-Forking-Fun/index.md","source":"@site/blog/2022-05-03-Forking-Fun/index.md","title":"The Joy of Forking","description":"I\'ve recently gotten back into forking (more precisely, hard forking) multiple projects on GitHub.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"github","permalink":"/blog/tags/github"},{"label":"c","permalink":"/blog/tags/c"},{"label":"ts","permalink":"/blog/tags/ts"},{"label":"go","permalink":"/blog/tags/go"},{"label":"astilectron","permalink":"/blog/tags/astilectron"},{"label":"gtk","permalink":"/blog/tags/gtk"}],"readingTime":4.255,"truncated":true,"authors":[{"name":"Mark \\"Happy-Ferret\\" Bauermeister","title":"Father of @PuddingBot","url":"https://github.com/happy-ferret","imageURL":"https://github.com/happy-ferret.png","key":"happy-ferret"}],"nextItem":{"title":"Cerberus Considered Harmful","permalink":"/blog/why-not-cerberus"}},"content":"I\'ve recently gotten back into forking (more precisely, hard forking) multiple projects on GitHub.\\r\\n\\r\\nThis can, undeniably, pose a fun experience of which I\'d like to give some short examples as well as the reasoning behind the fork.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n### [NeoCatclock](https://github.com/Happy-Ferret/neocatclock)\\r\\n\\r\\n[__NeoCatclock__](https://github.com/Happy-Ferret/neocatclock) is a fork of the venerable [catclock](https://github.com/BarkyTheDog/catclock) by __BarkyTheDog__ which itself is a slight\\r\\nupdate from the X10 original to work on modern X11 *nix systems. <br/>\\r\\n\\r\\nTo better understand the code, I condensed the original by removing the *digital* and *analog* modes <br/>\\r\\nand, finally, the mode code itself. <br/>\\r\\nThis alone saved me about 950 lines of code. <br/>\\r\\n\\r\\nThe current process makes me study the GTK3+ documentation in-depth, <br/> \\r\\nas the ultimate goal is to port __catclock__ from [Motif](https://motif.ics.com/) to [GTK](https://www.gtk.org/) to make it portable. <br/>\\r\\n\\r\\nEventually, I plan on rewriting the application in Go, using my [CoreGraphics](https://github.com/Anima-OS/CoreGraphics) framework <br/>\\r\\nI originally wrote for Anima OS but now plan on bringing to all modern desktop platforms.\\r\\n\\r\\n![catclock](catclock.png)\\r\\n\\r\\n### [Yggdrasil](https://github.com/middangeard-fiction/yggdrasil)\\r\\n\\r\\n[__Yggdrasil__](https://github.com/middangeard-fiction/yggdrasil) is a fork of [trizbort.io](https://github.com/henck/trizbort) <br/>\\r\\nwhich itself is a re-implementation of [trizbort](https://github.com/JasonLautzenheiser/trizbort), porting the latter from C# to the web.\\r\\n\\r\\n__Yggdrasil__ contains [two fixes](https://github.com/henck/trizbort/commits?author=Happy-Ferret) that have since been upstreamed. <br/>\\r\\n\\r\\nWhat separates my fork from the original project is that I turned the web app into a desktop app <br/>\\r\\nwhile also adding translation support. <br/>\\r\\nFinally, my fork contains an exporter for my own __Middangeard__ engine.\\r\\n\\r\\nI have not actively worked on the project since 2019 but intend to revive it very soon, <br/>\\r\\njust as I\'m reviving [__Middangeard__](https://github.com/middangeard-fiction/middangeard) itself.\\r\\n\\r\\n![yggdrasil](yggdrasil.png)\\r\\n\\r\\n### [Hippo Player Next](https://github.com/Happy-Ferret/hippo-next) (Working Title)\\r\\n\\r\\n[__Hippo Player Next__](https://github.com/Happy-Ferret/hippo-next) (*will probably be renamed to something else, to establish an original persona*) <br/>\\r\\nis a fork of [media-player](https://github.com/nt1m/media-player) that removes both the Electron and the web app part <br/>\\r\\nto focus solely on the desktop.\\r\\n\\r\\nTo achieve this desktop transformation, my fork utilizes [go-astilectron](https://github.com/asticode/go-astilectron), <br/>\\r\\na modern Electron binding to Go that uses a TCP socket as an IPC mechanism between the <br/>\\r\\nGo application and the Electron renderer.\\r\\n\\r\\nIn order to better facilitate __go-astilectron__, <br/>\\r\\nI upstreamed [changes](https://github.com/asticode/go-astilectron/pull/361) that enable more fine grained window control <br/>\\r\\nwithout having to fall back on the [Electron Remote](https://www.npmjs.com/package/@electron/remote) module, <br/>\\r\\nwhich can normally be used inside __go-astilectron__ like the following <br/>\\r\\n(if, like me, you\'re utilizing [go-astilectron-bootstrap](https://github.com/asticode/go-astilectron-bootstrap))\\r\\n\\r\\n<details>\\r\\n    <summary>Code</summary>\\r\\n\\r\\n```go\\r\\nWindows: []*bootstrap.Window{{\\r\\n\\t\\t\\tHomepage:       \\"index.html\\",\\r\\n\\t\\t\\tMessageHandler: desktop.HandleMessages,\\r\\n\\t\\t\\tOptions: &astilectron.WindowOptions{\\r\\n\\t\\t\\t\\tBackgroundColor: astikit.StrPtr(\\"#333\\"),\\r\\n\\t\\t\\t\\tCenter:          astikit.BoolPtr(true),\\r\\n\\t\\t\\t\\tWidth:           astikit.IntPtr(800),\\r\\n\\t\\t\\t\\tHeight:          astikit.IntPtr(600),\\r\\n\\t\\t\\t\\tWebPreferences: &astilectron.WebPreferences{\\r\\n\\t\\t\\t\\t\\tEnableRemoteModule: astikit.BoolPtr(true),\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t},\\r\\n\\t\\t}},\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\nInstead of the above and writing windowing code in JS, a window can now be set as __`Always on Top`__ <br/>\\r\\nby accessing the `astilectron.Window` struct and calling `SetAlwaysOnTop(enable)` on it.\\r\\n\\r\\nI also removed the CSD (Client Side Decorations) of the original Electron implementation <br/>\\r\\nin favor of re-using the OS\' own window decorations.\\r\\n\\r\\nOnce baseline media support (which is utterly broken upstream) is established <br/>\\r\\nand the app uses a proper SQLite database to save playlists, <br/>\\r\\nI plan on adding support for classic MOD files and better support for theming.\\r\\n\\r\\n![hippo player](hippo.png)\\r\\n\\r\\n### [ScummC](https://github.com/Happy-Ferret/scummc)\\r\\n[__ScummC__](https://github.com/Happy-Ferret/scummc) and [SCUMM](https://en.wikipedia.org/wiki/SCUMM) itself are something I\'ve been fascinated with for [quite a while](https://happy-ferret.github.io/posts/scumm-1.html).\\r\\n\\r\\nThe [original](https://github.com/AlbanBedel/scummc) by Alban Bedel has not been in active development since 2018. <br/>\\r\\nHowever, there has been a slight update in the music department, courtesy of [Masami Komuro](https://github.com/Wavestation/oq-zik)\\r\\n\\r\\nI lost my original local changes (mostly documentation) to a hard drive wipe at my old workplace, <br/>\\r\\nbut I plan on revisiting this project very soon.\\r\\n\\r\\n#### Possible changes\\r\\n* A modern, portable set of GUI tools (taking mild inspiration from [Lebostein](http://lebostein.de/tomysoft/scumm/))\\r\\n* Slight syntactic changes (while producing identical byte-code).\\r\\n* A fork of the [VSCode Extension](https://github.com/idleberg/vscode-scummc) with changes and additions.\\r\\n* Updates to the Wiki and, possibly, a dedicated website.\\r\\n* Improved debugging, taking pointers from [MixNMojo](https://mixnmojo.com/features/sitefeatures/LucasArts-First-Words/2).\\r\\n* A more thorough example (including iMuse audio).\\r\\n* Proper branding.\\r\\n\\r\\n## How to\\r\\n\\r\\nThe following is a quick and simple step-by-step guide on how to create a fork of an existing project:\\r\\n\\r\\n1. On the top right of a GitHub repository, locate the ![fork](fork.png) button.\\r\\n2. Fork the repository into an account/organization of your choice.\\r\\n3. Locate and copy the link to your fork.\\r\\n4. Open a terminal shell.\\r\\n5. __CD__ to a directory of your choice.\\r\\n6. `git clone <Fork URL>`\\r\\n7. Now type `git remote add upstream <URL to original repository>` to link back to the original project.\\r\\n8. You can now fetch upstream changes by typing `git fetch upstream` followed by `git pull upstream`.\\r\\n9. `git log upstream/<branch>` provides you with an upstream view of the commit log.\\r\\n10. You can also cherry pick changes from upstream by providing a hash (i e `git cherry pick <SHA>`).\\r\\n11. If you want to create pull requests from your new fork back to the upstream repository, <br/>\\r\\n    push those changes to your own fork first, then create a pull request from your repository on GitHub.\\r\\n    ![pull request](pr.png)\\r\\n    The __`Open pull request`__ button is located under __`Contribute`__ near your commit history.\\r\\n<br/>\\r\\n<br/>\\r\\n<br/>\\r\\n\\r\\n> *That\'s it for today. If you\'d like to donate to my work, I\'m now on [GitHub Sponsors\ud83d\udc96](https://github.com/sponsors/Happy-Ferret)*"},{"id":"why-not-cerberus","metadata":{"permalink":"/blog/why-not-cerberus","editUrl":"https://github.com/PuddingBot/pudding-bot-docs/tree/master/blog/2022-01-23-Why-not-Cerberus/index.md","source":"@site/blog/2022-01-23-Why-not-Cerberus/index.md","title":"Cerberus Considered Harmful","description":"The following blog post outlines some of the reasons I generally advise against choosing Cerberus as your Telegram group management bot.","date":"2022-01-23T00:00:00.000Z","formattedDate":"January 23, 2022","tags":[{"label":"telegram","permalink":"/blog/tags/telegram"},{"label":"cerberus","permalink":"/blog/tags/cerberus"}],"readingTime":4.405,"truncated":true,"authors":[{"name":"Mark \\"Happy-Ferret\\" Bauermeister","title":"Father of @PuddingBot","url":"https://github.com/happy-ferret","imageURL":"https://github.com/happy-ferret.png","key":"happy-ferret"}],"prevItem":{"title":"The Joy of Forking","permalink":"/blog/forking-fun"},"nextItem":{"title":"Coming Soon","permalink":"/blog/coming-soon"}},"content":"The following blog post outlines some of the reasons I generally advise against choosing [Cerberus](https://t.me/cerberus_protection_bot) as your Telegram group management bot.\\r\\n\\r\\nThis article is based on version __*0.3.0*__ of *Cerberus Protection Bot*.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n### Trust\\r\\n\\r\\nThe Cerberus maintainer is a rather sketchy figure. <br/>\\r\\nNot only does he refuse any type of code audit, he has also previously been caught attempting to subvert a rival Telegram group (oh the joys of [__/pol/__](https://en.wikipedia.org/wiki//pol/) Telegram clones) by trying to pit their admins against each other and slowly banning users from these groups. A practice generally known as __nuking__.\\r\\n\\r\\nSince the development process is entirely closed and everything happens in private <br/> (as opposed to [Rose](https://missrose.org/), which is closed source but has a documented development process, a [changelog](https://t.me/s/MarieNews) and a [blog](https://pnvlarsen.me/projects/)), nobody but its sole developer can be sure what direction is being taken, what design principles are being followed, redefined or outright ignored, or if any exploits are known.\\r\\n\\r\\nFurthermore, I\'ve personally witnessed the author of Cerberus write FROM his bot.<br/>\\r\\nThis is not well known \u2014 nor communicated, for obvious reasons \u2014 but possible through the use of a 3rd party Telegram client like [BGram](https://play.google.com/store/apps/details?id=org.telegram.BifToGram&hl=en&gl=US).<br/>\\r\\n__(link provided solely for research purposes. I do NOT endorse the use of this product.)__\\r\\n\\r\\nLastly, his general attitude towards end users means that anybody using Cerberus is left to their own devices.<br/>\\r\\nNo public support channels exist, and the documentation itself is rather sparse, technical and geared towards programmers rather\\r\\nthan the average Joe.\\r\\n\\r\\nThe bot is linking to the author\'s personal Telegram channel, which provides no valuable insights but instead promotes his Omegle.\\r\\n\\r\\n<details>\\r\\n    <summary>Screenshot</summary>\\r\\n\\r\\n![Omegle](cerberus.png)\\r\\n</details>\\r\\n\\r\\n### Incomplete documentation\\r\\n\\r\\nAs already outlined in the previous paragraph, Cerberus\' documentation is overall shoddy and incomplete.\\r\\n\\r\\nThe __/help__ commands (there are several, since the author has chosen to separate them based on user scope) display a long, monotone list.<br/>\\r\\nThere is no way to query help files for specific commands. Instead everything is presented vertically.\\r\\n\\r\\nThe __/start__ command doesn\'t limit itself to the bare essentials of using and exploring the bot, instead bludgeoning the user with a wall of text.\\r\\n\\r\\nThe __/ownerhelp__ command doesn\'t appear to work, at all. <br/>\\r\\nNeither in groups nor direct DMs to the bot have I nor others ever managed to coax the bot into returning any information.\\r\\n\\r\\nDocumentation for some of the more useful commands is wholly missing.<br/>\\r\\nThe bot supports *ads* which are displayed every n-hours.<br/>\\r\\nAside of the developer himself, nobody seems to be aware of its usage.<br/>\\r\\nMaybe there is no command and the ads are entered directly into a database\\r\\nby the sole maintainer?\\r\\n\\r\\nThe UI is cluttered and doesn\'t take advantage of basic Telegram bot features. <br/>\\r\\nInline buttons are wholly missing and a (very basic) command list was only added after my outspoken criticism.\\r\\n\\r\\n<details>\\r\\n    <summary>/start</summary>\\r\\n\\r\\n![/start](cerberus2.png)\\r\\n</details>\\r\\n\\r\\n<details>\\r\\n    <summary>/help</summary>\\r\\n\\r\\n![/help](cerberus3.png)\\r\\n</details>\\r\\n\\r\\n<details>\\r\\n    <summary>/modhelp</summary>\\r\\n\\r\\n![/modhelp](cerberus4.png)\\r\\n</details>\\r\\n\\r\\n<details>\\r\\n    <summary>/smodhelp</summary>\\r\\n\\r\\n![/smodhelp](cerberus5.png)\\r\\n</details>\\r\\n\\r\\n### Architectural choices\\r\\n\\r\\nOne of the things (the author of Cerberus names this as one of its outstanding features) that separates the bot from its contenders\\r\\nis that it doesn\'t follow the tried and proved Telegram permission model, instead opting for an internal permission model of the author\'s own design.\\r\\n\\r\\nThe sparse documentation prompts the group owner to give Cerberus full permission and only promote other admins through Cerberus\' __/promote__ and __/superpromote__ commands.<br/>\\r\\nOn closer examination, this leads to all admin permissions being managed internally by Cerberus.\\r\\n\\r\\nAs far as Telegram is concerned, <br/>\\r\\nall admins promoted by Cerberus (admins or \\"superadmins\\" \u2014 as Cerberus defines admins that can demote and, consequently, ban other admins) have the same two basic permissions set in the Telegram UI. \\"Change group info\\" and \\"Pin messages\\". <br/>\\r\\nIt is thus clear that Cerberus violates the existing permission model and instead opts to implement its own, largely undocumented, cruft.\\r\\n\\r\\nWith the aforementioned in mind, I\'ve also been informed by multiple sources that they\'re unable to remove group members that are not even clearly identified as admins.\\r\\n\\r\\n### Uncertain status\\r\\n\\r\\nThe author of Cerberus failed to enclose what stage of the software development life cycle his bot is actually in.<br/>\\r\\nNothing suggests that the bot is production ready, but nothing suggests that it\'s still in alpha or beta either.\\r\\n\\r\\nFeatures are added in secret, at random intervals. Often without even incrementing the version number.\\r\\nThe bot is taken offline for maintenance or due to an issue without prior notice.\\r\\n\\r\\nCombined with the lack of support, this leaves the user wondering whether Cerberus has not already reached\\r\\nEnd-of-life or, at best, a maintenance stage.\\r\\n\\r\\n### Closed source\\r\\n\\r\\nAs a major proponent of [FOSS](https://en.wikipedia.org/wiki/Free_and_open-source_software) software,<br/> I generally advise against the use of closed source or proprietary software products.\\r\\n\\r\\nClosed source software, especially when produced by a small group of people or a single developer, seldom provides a coherent support experience.<br/>\\r\\nOne of the strengths of free- and open-source software lies in its inherent capability to create communities and produce coherent documentation and other forms of community service.\\r\\n\\r\\n[@PuddingBot](https://t.me/puddingbot) is and will remain completely free (as in freedom AND free beer) and open-source.<br/>\\r\\nAs the author and maintainer of @PuddingBot I pledge to keep sensible data safe and handled with utmost care.\\r\\n\\r\\nThe full and unabridged [@PuddingBot source code can be found on GitHub](https://github.com/PuddingBot/pudding-bot)."},{"id":"coming-soon","metadata":{"permalink":"/blog/coming-soon","editUrl":"https://github.com/PuddingBot/pudding-bot-docs/tree/master/blog/2021-12-30-coming-soon.md","source":"@site/blog/2021-12-30-coming-soon.md","title":"Coming Soon","description":"A blog will soon be added in this spot.","date":"2021-12-30T00:00:00.000Z","formattedDate":"December 30, 2021","tags":[{"label":"telegram","permalink":"/blog/tags/telegram"},{"label":"puddingbot","permalink":"/blog/tags/puddingbot"}],"readingTime":0.14,"truncated":false,"authors":[{"name":"Mark \\"Happy-Ferret\\" Bauermeister","title":"Father of @PuddingBot","url":"https://github.com/happy-ferret","imageURL":"https://github.com/happy-ferret.png","key":"happy-ferret"}],"prevItem":{"title":"Cerberus Considered Harmful","permalink":"/blog/why-not-cerberus"}},"content":"A blog will soon be added in this spot.\\r\\nAs soon as there\'s anything worthwhile to talk about and the initial\\r\\nalpha development phase of [@PuddingBot](https://t.me/puddingbot) is complete."}]}')}}]);