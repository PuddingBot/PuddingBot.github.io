<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>@PuddingBot Blog</title>
        <link>https://PuddingBot.github.io/blog</link>
        <description>@PuddingBot Blog</description>
        <lastBuildDate>Tue, 03 May 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[The Joy of Forking]]></title>
            <link>https://PuddingBot.github.io/blog/forking-fun</link>
            <guid>forking-fun</guid>
            <pubDate>Tue, 03 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I've recently gotten back into forking (more precisely, hard forking) multiple projects on GitHub.]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve recently gotten back into forking (more precisely, hard forking) multiple projects on GitHub.</p><p>This can, undeniably, pose a fun experience of which I&#x27;d like to give some short examples as well as the reasoning behind the fork.</p><h3><a href="https://github.com/Happy-Ferret/neocatclock">NeoCatclock</a></h3><p><a href="https://github.com/Happy-Ferret/neocatclock"><strong>NeoCatclock</strong></a> is a fork of the venerable <a href="https://github.com/BarkyTheDog/catclock">catclock</a> by <strong>BarkyTheDog</strong> which itself is a slight
update from the X10 original to work on modern X11 *nix systems. <br/></p><p>To better understand the code, I condensed the original by removing the <em>digital</em> and <em>analog</em> modes <br/>
and, finally, the mode code itself. <br/>
This alone saved me about 950 lines of code. <br/></p><p>The current process makes me study the GTK3+ documentation in-depth, <br/>
as the ultimate goal is to port <strong>catclock</strong> from <a href="https://motif.ics.com/">Motif</a> to <a href="https://www.gtk.org/">GTK</a> to make it portable. <br/></p><p>Eventually, I plan on rewriting the application in Go, using my <a href="https://github.com/Anima-OS/CoreGraphics">CoreGraphics</a> framework <br/>
I originally wrote for Anima OS but now plan on bringing to all modern desktop platforms.</p><p><img src="catclock.png" alt="catclock"/></p><h3><a href="https://github.com/middangeard-fiction/yggdrasil">Yggdrasil</a></h3><p><a href="https://github.com/middangeard-fiction/yggdrasil"><strong>Yggdrasil</strong></a> is a fork of <a href="https://github.com/henck/trizbort">trizbort.io</a> <br/>
which itself is a re-implementation of <a href="https://github.com/JasonLautzenheiser/trizbort">trizbort</a>, porting the latter from C# to the web.</p><p><strong>Yggdrasil</strong> contains <a href="https://github.com/henck/trizbort/commits?author=Happy-Ferret">two fixes</a> that have since been upstreamed. <br/></p><p>What separates my fork from the original project is that I turned the web app into a desktop app <br/>
while also adding translation support. <br/>
Finally, my fork contains an exporter for my own <strong>Middangeard</strong> engine.</p><p>I have not actively worked on the project since 2019 but intend to revive it very soon, <br/>
just as I&#x27;m reviving <a href="https://github.com/middangeard-fiction/middangeard"><strong>Middangeard</strong></a> itself.</p><p><img src="yggdrasil.png" alt="yggdrasil"/></p><h3><a href="https://github.com/Happy-Ferret/hippo-next">Hippo Player Next</a> (Working Title)</h3><p><a href="https://github.com/Happy-Ferret/hippo-next"><strong>Hippo Player Next</strong></a> (<em>will probably be renamed to something else, to establish an original persona</em>) <br/>
is a fork of <a href="https://github.com/nt1m/media-player">media-player</a> that removes both the Electron and the web app part <br/>
to focus solely on the desktop.</p><p>To achieve this desktop transformation, my fork utilizes <a href="https://github.com/asticode/go-astilectron">go-astilectron</a>, <br/>
a modern Electron binding to Go that uses a TCP socket as an IPC mechanism between the <br/>
Go application and the Electron renderer.</p><p>In order to better facilitate <strong>go-astilectron</strong>, <br/>
I upstreamed <a href="https://github.com/asticode/go-astilectron/pull/361">changes</a> that enable more fine grained window control <br/>
without having to fall back on the <a href="https://www.npmjs.com/package/@electron/remote">Electron Remote</a> module, <br/>
which can normally be used inside <strong>go-astilectron</strong> like the following <br/>
(if, like me, you&#x27;re utilizing <a href="https://github.com/asticode/go-astilectron-bootstrap">go-astilectron-bootstrap</a>)</p><details><summary>Code</summary><pre><code class="language-go">Windows: []*bootstrap.Window{{
            Homepage:       &quot;index.html&quot;,
            MessageHandler: desktop.HandleMessages,
            Options: &amp;astilectron.WindowOptions{
                BackgroundColor: astikit.StrPtr(&quot;#333&quot;),
                Center:          astikit.BoolPtr(true),
                Width:           astikit.IntPtr(800),
                Height:          astikit.IntPtr(600),
                WebPreferences: &amp;astilectron.WebPreferences{
                    EnableRemoteModule: astikit.BoolPtr(true),
                },
            },
        }},
</code></pre></details><p>Instead of the above and writing windowing code in JS, a window can now be set as <strong><code>Always on Top</code></strong> <br/>
by accessing the <code>astilectron.Window</code> struct and calling <code>SetAlwaysOnTop(enable)</code> on it.</p><p>I also removed the CSD (Client Side Decorations) of the original Electron implementation <br/>
in favor of re-using the OS&#x27; own window decorations.</p><p>Once baseline media support (which is utterly broken upstream) is established <br/>
and the app uses a proper SQLite database to save playlists, <br/>
I plan on adding support for classic MOD files and better support for theming.</p><p><img src="hippo.png" alt="hippo player"/></p><h3><a href="https://github.com/Happy-Ferret/scummc">ScummC</a></h3><p><a href="https://github.com/Happy-Ferret/scummc"><strong>ScummC</strong></a> and <a href="https://en.wikipedia.org/wiki/SCUMM">SCUMM</a> itself are something I&#x27;ve been fascinated with for <a href="https://happy-ferret.github.io/posts/scumm-1.html">quite a while</a>.</p><p>The <a href="https://github.com/AlbanBedel/scummc">original</a> by Alban Bedel has not been in active development since 2018. <br/>
However, there has been a slight update in the music department, courtesy of <a href="https://github.com/Wavestation/oq-zik">Masami Komuro</a></p><p>I lost my original local changes (mostly documentation) to a hard drive wipe at my old workplace, <br/>
but I plan on revisiting this project very soon.</p><h4>Possible changes</h4><ul><li>A modern, portable set of GUI tools (taking mild inspiration from <a href="http://lebostein.de/tomysoft/scumm/">Lebostein</a>)</li><li>Slight syntactic changes (while producing identical byte-code).</li><li>A fork of the <a href="https://github.com/idleberg/vscode-scummc">VSCode Extension</a> with changes and additions.</li><li>Updates to the Wiki and, possibly, a dedicated website.</li><li>Improved debugging, taking pointers from <a href="https://mixnmojo.com/features/sitefeatures/LucasArts-First-Words/2">MixNMojo</a>.</li><li>A more thorough example (including iMuse audio).</li><li>Proper branding.</li></ul><h2>How to</h2><p>The following is a quick and simple step-by-step guide on how to create a fork of an existing project:</p><ol><li>On the top right of a GitHub repository, locate the <img src="fork.png" alt="fork"/> button.</li><li>Fork the repository into an account/organization of your choice.</li><li>Locate and copy the link to your fork.</li><li>Open a terminal shell.</li><li><strong>CD</strong> to a directory of your choice.</li><li><code>git clone &lt;Fork URL&gt;</code></li><li>Now type <code>git remote add upstream &lt;URL to original repository&gt;</code> to link back to the original project.</li><li>You can now fetch upstream changes by typing <code>git fetch upstream</code> followed by <code>git pull upstream</code>.</li><li><code>git log upstream/&lt;branch&gt;</code> provides you with an upstream view of the commit log.</li><li>You can also cherry pick changes from upstream by providing a hash (i e <code>git cherry pick &lt;SHA&gt;</code>).</li><li>If you want to create pull requests from your new fork back to the upstream repository, <br/>
push those changes to your own fork first, then create a pull request from your repository on GitHub.
<img src="pr.png" alt="pull request"/>
The <strong><code>Open pull request</code></strong> button is located under <strong><code>Contribute</code></strong> near your commit history.<br/><br/><br/></li></ol><blockquote><p><em>That&#x27;s it for today. If you&#x27;d like to donate to my work, I&#x27;m now on <a href="https://github.com/sponsors/Happy-Ferret">GitHub SponsorsðŸ’–</a></em></p></blockquote>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cerberus Considered Harmful]]></title>
            <link>https://PuddingBot.github.io/blog/why-not-cerberus</link>
            <guid>why-not-cerberus</guid>
            <pubDate>Sun, 23 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[The following blog post outlines some of the reasons I generally advise against choosing Cerberus as your Telegram group management bot.]]></description>
            <content:encoded><![CDATA[<p>The following blog post outlines some of the reasons I generally advise against choosing <a href="https://t.me/cerberus_protection_bot">Cerberus</a> as your Telegram group management bot.</p><p>This article is based on version <strong><em>0.3.0</em></strong> of <em>Cerberus Protection Bot</em>.</p><h3>Trust</h3><p>The Cerberus maintainer is a rather sketchy figure. <br/>
Not only does he refuse any type of code audit, he has also previously been caught attempting to subvert a rival Telegram group (oh the joys of <a href="https://en.wikipedia.org/wiki//pol/"><strong>/pol/</strong></a> Telegram clones) by trying to pit their admins against each other and slowly banning users from these groups. A practice generally known as <strong>nuking</strong>.</p><p>Since the development process is entirely closed and everything happens in private <br/> (as opposed to <a href="https://missrose.org/">Rose</a>, which is closed source but has a documented development process, a <a href="https://t.me/s/MarieNews">changelog</a> and a <a href="https://pnvlarsen.me/projects/">blog</a>), nobody but its sole developer can be sure what direction is being taken, what design principles are being followed, redefined or outright ignored, or if any exploits are known.</p><p>Furthermore, I&#x27;ve personally witnessed the author of Cerberus write FROM his bot.<br/>
This is not well known â€” nor communicated, for obvious reasons â€” but possible through the use of a 3rd party Telegram client like <a href="https://play.google.com/store/apps/details?id=org.telegram.BifToGram&amp;hl=en&amp;gl=US">BGram</a>.<br/>
<strong>(link provided solely for research purposes. I do NOT endorse the use of this product.)</strong></p><p>Lastly, his general attitude towards end users means that anybody using Cerberus is left to their own devices.<br/>
No public support channels exist, and the documentation itself is rather sparse, technical and geared towards programmers rather
than the average Joe.</p><p>The bot is linking to the author&#x27;s personal Telegram channel, which provides no valuable insights but instead promotes his Omegle.</p><details><summary>Screenshot</summary><p><img src="cerberus.png" alt="Omegle"/></p></details><h3>Incomplete documentation</h3><p>As already outlined in the previous paragraph, Cerberus&#x27; documentation is overall shoddy and incomplete.</p><p>The <strong>/help</strong> commands (there are several, since the author has chosen to separate them based on user scope) display a long, monotone list.<br/>
There is no way to query help files for specific commands. Instead everything is presented vertically.</p><p>The <strong>/start</strong> command doesn&#x27;t limit itself to the bare essentials of using and exploring the bot, instead bludgeoning the user with a wall of text.</p><p>The <strong>/ownerhelp</strong> command doesn&#x27;t appear to work, at all. <br/>
Neither in groups nor direct DMs to the bot have I nor others ever managed to coax the bot into returning any information.</p><p>Documentation for some of the more useful commands is wholly missing.<br/>
The bot supports <em>ads</em> which are displayed every n-hours.<br/>
Aside of the developer himself, nobody seems to be aware of its usage.<br/>
Maybe there is no command and the ads are entered directly into a database
by the sole maintainer?</p><p>The UI is cluttered and doesn&#x27;t take advantage of basic Telegram bot features. <br/>
Inline buttons are wholly missing and a (very basic) command list was only added after my outspoken criticism.</p><details><summary>/start</summary><p><img src="cerberus2.png" alt="/start"/></p></details><details><summary>/help</summary><p><img src="cerberus3.png" alt="/help"/></p></details><details><summary>/modhelp</summary><p><img src="cerberus4.png" alt="/modhelp"/></p></details><details><summary>/smodhelp</summary><p><img src="cerberus5.png" alt="/smodhelp"/></p></details><h3>Architectural choices</h3><p>One of the things (the author of Cerberus names this as one of its outstanding features) that separates the bot from its contenders
is that it doesn&#x27;t follow the tried and proved Telegram permission model, instead opting for an internal permission model of the author&#x27;s own design.</p><p>The sparse documentation prompts the group owner to give Cerberus full permission and only promote other admins through Cerberus&#x27; <strong>/promote</strong> and <strong>/superpromote</strong> commands.<br/>
On closer examination, this leads to all admin permissions being managed internally by Cerberus.</p><p>As far as Telegram is concerned, <br/>
all admins promoted by Cerberus (admins or &quot;superadmins&quot; â€” as Cerberus defines admins that can demote and, consequently, ban other admins) have the same two basic permissions set in the Telegram UI. &quot;Change group info&quot; and &quot;Pin messages&quot;. <br/>
It is thus clear that Cerberus violates the existing permission model and instead opts to implement its own, largely undocumented, cruft.</p><p>With the aforementioned in mind, I&#x27;ve also been informed by multiple sources that they&#x27;re unable to remove group members that are not even clearly identified as admins.</p><h3>Uncertain status</h3><p>The author of Cerberus failed to enclose what stage of the software development life cycle his bot is actually in.<br/>
Nothing suggests that the bot is production ready, but nothing suggests that it&#x27;s still in alpha or beta either.</p><p>Features are added in secret, at random intervals. Often without even incrementing the version number.
The bot is taken offline for maintenance or due to an issue without prior notice.</p><p>Combined with the lack of support, this leaves the user wondering whether Cerberus has not already reached
End-of-life or, at best, a maintenance stage.</p><h3>Closed source</h3><p>As a major proponent of <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software">FOSS</a> software,<br/> I generally advise against the use of closed source or proprietary software products.</p><p>Closed source software, especially when produced by a small group of people or a single developer, seldom provides a coherent support experience.<br/>
One of the strengths of free- and open-source software lies in its inherent capability to create communities and produce coherent documentation and other forms of community service.</p><p><a href="https://t.me/puddingbot">@PuddingBot</a> is and will remain completely free (as in freedom AND free beer) and open-source.<br/>
As the author and maintainer of @PuddingBot I pledge to keep sensible data safe and handled with utmost care.</p><p>The full and unabridged <a href="https://github.com/PuddingBot/pudding-bot">@PuddingBot source code can be found on GitHub</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Coming Soon]]></title>
            <link>https://PuddingBot.github.io/blog/coming-soon</link>
            <guid>coming-soon</guid>
            <pubDate>Thu, 30 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[A blog will soon be added in this spot.]]></description>
            <content:encoded><![CDATA[<p>A blog will soon be added in this spot.
As soon as there&#x27;s anything worthwhile to talk about and the initial
alpha development phase of <a href="https://t.me/puddingbot">@PuddingBot</a> is complete.</p>]]></content:encoded>
        </item>
    </channel>
</rss>